import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
import os
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import CountVectorizer
os.chdir('D:\Gothai\Downloads')
dataframe=pd.read_csv('tamil_offensive_train.tsv', sep='\t')
t=pd.read_csv('tamil_offensive_test task 1 with labels.tsv',sep='\t')
d=dataframe.copy()
d.category.unique()
d['category'].value_counts()
d.info()
import regex as re
from collections import Counter
spec_chars = ["!",'"',"#","%","&","'","(",")",
              "*","+",",","-",".","/",":",";","<",
              "=",">","?","@","[","\\","]","^","_",
              "`","{","|","}","~","â€“"]
for char in spec_chars:
    d['text'] = d['text'].str.replace(char, ' ')
#df['exc'] = df['line'].map(lambda x: x.count("!"))
#d['text']=d['text'].str.replace(char,' ')
d['words'] = [len(x.split()) for x in d['text'].tolist()]
d.describe()
list=['not-Tamil']
new=d.copy()
new=d[~d.category.isin(list)]
new.category.unique()
new['category'].value_counts()
new['category']=new['category'].map({'OFF':1,'NOT':0})
t['category']=t['category'].map({'OFF':1,'NOT':0})
x=new['text'].values
y=new['category'].values
test_category=t['category'].values

vectorize= TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,3))
response= vectorize.fit_transform(x)
print(response.shape)
t1=t['text'].values
tt=vectorize.transform(t1)
tt.shape
smote = SMOTE(sampling_strategy='minority')
X_sm, y_sm = smote.fit_resample(response, y)
y1_sm=pd.DataFrame(y_sm,columns=['category'])
y1_sm['category'].value_counts()


#lR
from sklearn.linear_model import LogisticRegression
logistic=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)
logistic.fit(X_sm, y1_sm)
#logistic.fit(response, y)
tv_prediction_logistic=logistic.predict(tt)
print(tv_prediction_logistic)
acc_cv_score_log=accuracy_score(test_category,tv_prediction_logistic)
print("acc_cv_score :",acc_cv_score_log)
#Classification report for bag of words 
F1_score_report_tv_log=classification_report(test_category,tv_prediction_logistic,target_names=['NOT','OFF'])
print(F1_score_report_tv_log)
confusion_matrix(test_category, tv_prediction_logistic)

#SVM

from sklearn.svm import SVC # "Support vector classifier"  
classifier = SVC(kernel='linear', random_state=42)  
classifier.fit(X_sm,y1_sm)  
#classifier.score(tv_test_text,test_category)
tv_prediction_svm= classifier.predict(tt)  
acc_tfidf_score_svm=accuracy_score(test_category,tv_prediction_svm)
print("acc_tfidf_score :",acc_tfidf_score_svm)
F1_score_report_svm=classification_report(test_category,tv_prediction_svm,target_names=['NOT','OFF'])
print(F1_score_report_svm)
confusion_matrix(test_category, tv_prediction_svm)
