
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import nltk
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelBinarizer
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from wordcloud import WordCloud,STOPWORDS
from nltk.stem import WordNetLemmatizer
from nltk.tokenize import word_tokenize,sent_tokenize
from bs4 import BeautifulSoup
#import spacy
import re,string,unicodedata
from nltk.tokenize.toktok import ToktokTokenizer
from nltk.stem import LancasterStemmer,WordNetLemmatizer
from sklearn.linear_model import LogisticRegression,SGDClassifier
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import SVC
from textblob import TextBlob
from textblob import Word
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score
from sklearn.model_selection import train_test_split
from scipy.sparse import csr_matrix
import os
os.chdir('D:\Gothai\Downloads')
dataframe=pd.read_csv('tamil_offensive_train.tsv', sep='\t')
t=pd.read_csv('tamil_offensive_test task 1 with labels.tsv',sep='\t')
d=dataframe.copy()
d.info()
list=['not-Tamil']
new=d[~d.category.isin(list)]
new.category.unique()
new['category'].value_counts()
#lb=LabelBinarizer()
spec_chars = ["!",'"',"#","%","&","'","(",")",
              "*","+",",","-",".","/",":",";","<",
              "=",">","?","@","[","\\","]","^","_",
              "`","{","|","}","~","â€“"]
for char in spec_chars:
    new['text'] = new['text'].str.replace(char, ' ')
#transformed sentiment data
#sentiment_data=lb.fit_transform(new['category'])
#print(sentiment_data.shape)
#train_text,test_text,train_category,test_category=train_test_split(x,sentiment_data,test_size=0.3,random_state=4)


new['category']=new['category'].map({'OFF':1,'NOT':0})
t['category']=t['category'].map({'OFF':1,'NOT':0})
test_category=t['category'].values
test_text=t['text'].values
##spliting the data test train
x=new['text'].values
y=new['category'].values
#train_text,test_text,train_category,test_category=train_test_split(x,y,test_size=0.3,random_state=4)


#tfidf min_df=0,max_df=1,use_idf=True,ngram_range=(1,3)
tv=TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,3))
tv_train_text=tv.fit_transform(x)
tv_test_text=tv.transform(test_text)
#print(tv_train_text)
print('Tfidf_train:',tv_train_text.shape)
print('Tfidf_test:',tv_test_text.shape)

##SVM
from sklearn.svm import SVC # "Support vector classifier"  
classifier = SVC(kernel='linear', random_state=42)  
##classifier.fit(x_train, y_train)  
classifier.fit(tv_train_text, y)  
tv_prediction_svm= classifier.predict(tv_test_text)  
#Accuracy score for tfidf features
acc_tfidf_score_svm=accuracy_score(test_category,tv_prediction_svm)
print("acc_tfidf_score :",acc_tfidf_score_svm)
#Classification report for bag of words 
F1_score_report_svm=classification_report(test_category,tv_prediction_svm,target_names=['NOT','OFF'])
print(F1_score_report_svm)
confusion_matrix(test_category, tv_prediction_svm)


##LOGISTIC
logistic=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)
logistic.fit(tv_train_text,y)
tv_prediction_logistic=logistic.predict(tv_test_text)
#Accuracy score for tfidf features
acc_tfidf_score_log=accuracy_score(test_category,tv_prediction_logistic)
print("acc_tfidf_score :",acc_tfidf_score_log)
#Classification report for bag of words 
F1_score_report_log=classification_report(test_category,tv_prediction_logistic,target_names=['OFF','NOT'])
print(F1_score_report_log)
confusion_matrix(test_category, tv_prediction_logistic)

##CV min_df=0,max_df=1,binary=False,ngram_range=(1,3)
cv=CountVectorizer(min_df=0,max_df=1,binary=False,ngram_range=(1,3))
cv_train_text=cv.fit_transform(x)
cv_test_text=cv.transform(test_text)
print('cv_train:',cv_train_text.shape)
print('cv_test:',cv_test_text.shape)

##svm
from sklearn.svm import SVC # "Support vector classifier"  
classifier = SVC(kernel='linear', random_state=0)  
##classifier.fit(x_train, y_train)  
classifier.fit(cv_train_text, y)  
cv_prediction_svm= classifier.predict(cv_test_text)  
#Accuracy score for tfidf features
acc_cv_score_svm=accuracy_score(test_category,cv_prediction_svm)
print("acc_tfidf_score :",acc_cv_score_svm)
#Classification report for bag of words 
F1_score_report_cv_svm=classification_report(test_category,cv_prediction_svm,target_names=['OFF','NOT'])
print(F1_score_report_cv_svm)
confusion_matrix(test_category, cv_prediction_svm)


##LOGISTIC
logistic=LogisticRegression(penalty='l2',max_iter=500,C=1,random_state=42)
logistic.fit(cv_train_text,y)
cv_prediction_logistic=logistic.predict(cv_test_text)
#Accuracy score for tfidf features
acc_cv_score_log=accuracy_score(test_category,cv_prediction_logistic)
print("acc_cv_score :",acc_cv_score_log)
#Classification report for bag of words 
F1_score_report_cv_log=classification_report(test_category,cv_prediction_logistic,target_names=['OFF','NOT'])
print(F1_score_report_cv_log)
confusion_matrix(test_category, cv_prediction_logistic)
